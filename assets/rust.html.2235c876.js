import{_ as l,r as c,o as u,c as i,a,w as t,F as k,e as o,b as n,d as s}from"./app.afb47d0b.js";var r="/assets/plugins.9b681279.png",d="/assets/rust-project-creat.c567a82a.png",m="/assets/code-fold.84ca4b8f.png";const v={},b=o(`<h1 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h1><h2 id="getting-start" tabindex="-1"><a class="header-anchor" href="#getting-start" aria-hidden="true">#</a> Getting Start</h2><h3 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> Install</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># install rustup</span>
$ <span class="token function">curl</span> --proto <span class="token string">&#39;=https&#39;</span> --tlsv1.2 -sSf https://sh.rustup.rs <span class="token operator">|</span> <span class="token function">sh</span>
$ <span class="token builtin class-name">source</span> <span class="token string">&quot;<span class="token environment constant">$HOME</span>/.cargo/env&quot;</span>

$ rustc --version   <span class="token comment"># -V</span>
<span class="token comment"># rustc 1.63.0</span>
$ cargo --version   <span class="token comment"># -V</span>
<span class="token comment"># cargo 1.63.0</span>
</code></pre></div><h3 id="cargo-new-\u521B\u5EFArust\u9879\u76EE" tabindex="-1"><a class="header-anchor" href="#cargo-new-\u521B\u5EFArust\u9879\u76EE" aria-hidden="true">#</a> cargo new \u521B\u5EFArust\u9879\u76EE</h3><div class="language-bash ext-sh"><pre class="language-bash"><code>$ cargo new rust-hello
$ <span class="token builtin class-name">cd</span> rust-hello
$ cargo run
<span class="token comment">#    Compiling rust-hello v0.1.0 (/Users/coulsonzero/Downloads/rust-hello)</span>
<span class="token comment">#     Finished dev [unoptimized + debuginfo] target(s) in 0.42s</span>
<span class="token comment">#      Running \`target/debug/rust-hello\`</span>
Hello, world<span class="token operator">!</span>
</code></pre></div><h3 id="\u7F16\u8BD1\u5668-clion" tabindex="-1"><a class="header-anchor" href="#\u7F16\u8BD1\u5668-clion" aria-hidden="true">#</a> \u7F16\u8BD1\u5668 Clion</h3><p><img src="`+r+'" alt=""><img src="'+d+`" alt=""></p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h3><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="variables-constant" tabindex="-1"><a class="header-anchor" href="#variables-constant" aria-hidden="true">#</a> Variables &amp; Constant</h3><ul><li>let</li><li>const</li><li>static</li></ul><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// let \u7ED1\u5B9A\u53D8\u91CF</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>            <span class="token comment">// \u4E0D\u53EF\u53D8\u53D8\u91CF</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment">// \u53EF\u53D8\u53D8\u91CF mut</span>

<span class="token comment">// let shadowing \u7279\u6027</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token char">&#39;k&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// assign multiple vars</span>
<span class="token keyword">let</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token comment">// const \u5E38\u91CF</span>
<span class="token keyword">const</span> <span class="token constant">PI</span><span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>
<span class="token comment">// static \u9759\u6001\u5168\u5C40\u53D8\u91CF\uFF0C\u64CD\u4F5C\u4FEE\u6539\u9700\u4F7F\u7528unsafe</span>
<span class="token keyword">static</span> <span class="token keyword">mut</span> z<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    z <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>let: \u7ED1\u5B9A\u53D8\u91CF, \u53EF\u4EE5\u7ED9\u540C\u4E00\u4E2A\u53D8\u91CF\u7ED1\u5B9A\u4E0D\u540C\u503C, \u4F46\u4F7F\u7528\u7684\u5185\u5B58\u5730\u5740\u4E0D\u540C (eg: \u76F8\u540C\u7684\u4EBA\u7BA1\u7406\u4E0D\u540C\u7684\u4E8B\u52A1)</p><p>let\u53EF\u4EE5\u7701\u7565\u5927\u4E8E2\u4E2A\u5B57\u7B26\u7684\u7C7B\u578B\uFF0C\u4F46\u4E0D\u63A8\u8350</p><p>mut\uFF1A\u4F7F\u53D8\u91CF\u503C\u53EF\u4EE5\u6539\u53D8</p><p>const\uFF1A\u5E38\u91CF</p><p>static\uFF1A\u9759\u6001\u53D8\u91CF\uFF0C\u6307\u5411\u540C\u4E00\u4E2A\u5806\u5185\u5B58\u5730\u5740\uFF0C \u64CD\u4F5C\u4FEE\u6539\u9700\u4F7F\u7528unsafe\u4F7F\u5185\u5B58\u5B89\u5168</p></blockquote><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h3><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// format</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hello {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{1} is located in {2}, and my name is {0}, &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Shanghai&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{city} is located in {country}&quot;</span><span class="token punctuation">,</span> city <span class="token operator">=</span> <span class="token string">&quot;Shanghai&quot;</span><span class="token punctuation">,</span> country <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Binary: {:b} Hex: {:x} Octal: {:o}&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// (12, true, &quot;hello&quot;)</span>
</code></pre></div><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h3><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token comment">// input a line string:</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
</code></pre></div><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token comment">// input a number:</span>

<span class="token comment">// --snip--</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a Number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
</code></pre></div><h3 id="data-type" tabindex="-1"><a class="header-anchor" href="#data-type" aria-hidden="true">#</a> Data Type</h3><ul><li>Number: <ul><li>Int(<code>\u9ED8\u8BA4\uFF1Ai32</code>) : <ul><li><code>i8, i16, i32, i64, i128, isize</code></li><li><code>u8, u16, u32, u64, u128, usiz</code></li></ul></li><li>Float(<code>\u9ED8\u8BA4: f64</code>): <code>f32, f64</code></li></ul></li><li>Bool: <code>bool</code></li><li>Char: <code>char</code></li><li>String: <code>&amp;str</code>, <code>String</code></li></ul><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">10.6</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token char">&#39;k&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// array</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// tuple</span>
<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// vector</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// hashmap</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token comment">// variable address</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;{:p}&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token function">type_of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// [i32; 6]</span>
<span class="token function">type_of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// [i32; 6]</span>
<span class="token function">type_of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">32.90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// prints &quot;f64&quot;</span>
<span class="token function">type_of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// prints &quot;std::vec::Vec&lt;i32&gt;&quot;</span>
<span class="token function">type_of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// prints &quot;&amp;str&quot;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">type_of</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token namespace">std<span class="token punctuation">::</span>any<span class="token punctuation">::</span></span><span class="token function">type_name</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="comment" tabindex="-1"><a class="header-anchor" href="#comment" aria-hidden="true">#</a> Comment</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// single comment</span>

<span class="token comment">/*
 * multi-line comment
 */</span>

<span class="token comment">/// document comment (method header)</span>
<span class="token comment">///</span>
<span class="token comment">///  Use [\`eprint!\`] instead to print error and progress messages.</span>
<span class="token comment">///</span>
<span class="token comment">///  necessary to use [\`io::stdout().flush()\`][flush] to ensure the output is emitted</span>
<span class="token comment">/// immediately.</span>
<span class="token comment">///</span>
<span class="token comment">/// using the \`Debug\` implementation</span>
<span class="token comment">///</span>
<span class="token comment">/// # Examples</span>
<span class="token comment">///</span>
<span class="token comment">/// \`\`\`rust</span>
<span class="token comment">/// use std::io::{self, Write};</span>
<span class="token comment">///</span>
<span class="token comment">/// print!(&quot;this string has a newline, why not choose println! instead?\\n&quot;);</span>
<span class="token comment">///</span>
<span class="token comment">/// io::stdout().flush().unwrap();</span>
<span class="token comment">/// \`\`\`</span>


<span class="token comment">//! document comment (file header)</span>
<span class="token comment">//!</span>
<span class="token comment">//! \`\`\`</span>
<span class="token comment">//! (1) string:</span>
<span class="token comment">//!         a) for c in s.chars() {...}</span>
<span class="token comment">//!         b) for (_, c) in s.chars().enumerate() {...}</span>
<span class="token comment">//! (2) array:</span>
<span class="token comment">//!         for v in nums {...}</span>
<span class="token comment">//! \`\`\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>for example</strong></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">/* ================ main.rs ================ */</span>
<span class="token attribute attr-name">#![allow(dead_code)]</span>            <span class="token comment">// warning: struct \`Rectangle\` is never constructed, warning: function \`run\` is never used</span>
<span class="token attribute attr-name">#![allow(unused_imports)]</span>       <span class="token comment">// unused import: \`crate::template::template_impl as ti\`</span>
<span class="token attribute attr-name">#![allow(unused_variables)]</span>     <span class="token comment">// unused variable: \`integer\`</span>

<span class="token comment">//! simplify the usage of module</span>
<span class="token comment">// use add::add_one::plus;</span>
<span class="token comment">// use crate::basic::output;</span>
<span class="token comment">// use crate::basic::datatype;</span>
<span class="token comment">// use crate::basic::vars;</span>
<span class="token comment">// use crate::control::while_loop;</span>
<span class="token comment">// use crate::core::string;</span>
<span class="token comment">// use crate::core::tuple;</span>
<span class="token comment">// use crate::core::vector;</span>
<span class="token comment">// use crate::core::hashmap;</span>
<span class="token comment">// use crate::template::template_func as tf;</span>
<span class="token comment">// use crate::template::template_struct as ts;</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>template<span class="token punctuation">::</span></span>template_impl <span class="token keyword">as</span> ti<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>template<span class="token punctuation">::</span></span>template_impl_2 <span class="token keyword">as</span> ti2<span class="token punctuation">;</span>
<span class="token comment">// use crate::structs::struct_impl_for as sif;</span>



<span class="token comment">/// manage modules</span>
<span class="token comment">// mod add;</span>
<span class="token comment">// mod basic;</span>
<span class="token comment">// pub mod control;</span>
<span class="token comment">// mod core;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">template</span><span class="token punctuation">;</span>
<span class="token comment">// mod functions;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">structs</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">macros</span><span class="token punctuation">;</span>
<span class="token comment">// mod depends;</span>





<span class="token comment">/// note: \`#[warn(dead_code)]\` on by default</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">/* module usage example */</span>
    <span class="token comment">// println!(&quot;{}&quot;, plus(1));</span>

    <span class="token comment">/* basic */</span>
    <span class="token comment">// output::run();</span>
    <span class="token comment">// datatype::run();</span>
    <span class="token comment">// vars::run();</span>
    <span class="token comment">// basic::vars_more::run();</span>
    <span class="token comment">// basic::vars_more::let_example();</span>

    <span class="token comment">/* control */</span>
    <span class="token comment">// control::for_loop::run();</span>
    <span class="token comment">// while_loop::run();</span>


    <span class="token comment">/* core */</span>
    <span class="token comment">// string::hi(&quot;John Smith&quot;.to_string());</span>
    <span class="token comment">// string::run();</span>
    <span class="token comment">// tuple::run();</span>
    <span class="token comment">// vector::run();</span>
    <span class="token comment">// hashmap::run();</span>
    <span class="token comment">// core::str::run();</span>


    <span class="token comment">/* functions */</span>
    <span class="token comment">// functions::fun::run();</span>
    <span class="token comment">// functions::rand::run();</span>

    <span class="token comment">// structs</span>
    <span class="token comment">// structs::struct_func::run();</span>
    <span class="token comment">// structs::struct_impl::run();</span>
    <span class="token comment">// sif::run();</span>

    <span class="token comment">/* template */</span>
    <span class="token comment">// tf::run();</span>
    <span class="token comment">// ts::run();</span>
    <span class="token comment">// ti::run();</span>
    <span class="token comment">// ti2::run();</span>


    <span class="token comment">/* macros */</span>
    <span class="token comment">// macros::macro_r::run();</span>
    <span class="token comment">// macros::type_of::example();</span>
    <span class="token comment">// macros::color::example();</span>
    <span class="token namespace">macros<span class="token punctuation">::</span>color<span class="token punctuation">::</span></span><span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">/* depends */</span>
    <span class="token comment">// depends::depend::run();</span>

<span class="token punctuation">}</span>

<span class="token comment">// output:</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="control-loop" tabindex="-1"><a class="header-anchor" href="#control-loop" aria-hidden="true">#</a> Control &amp; Loop</h2><h3 id="if-statement" tabindex="-1"><a class="header-anchor" href="#if-statement" aria-hidden="true">#</a> If statement</h3><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">if</span> condition <span class="token punctuation">{</span>
    <span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition <span class="token punctuation">{</span>
    <span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition <span class="token punctuation">{</span>
    <span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token comment">/// a &gt; b ? a : b</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="match-statement" tabindex="-1"><a class="header-anchor" href="#match-statement" aria-hidden="true">#</a> Match statement</h3><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">let</span> day<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">match</span> day <span class="token punctuation">{</span>
    <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Workday&quot;</span><span class="token punctuation">,</span>
    <span class="token number">6</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">,</span>
    <span class="token number">7</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Sunday&quot;</span><span class="token punctuation">,</span>
    _ <span class="token operator">=&gt;</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Workday</span>
</code></pre></div><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> day<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span> day <span class="token punctuation">{</span>
    <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Workday&quot;</span><span class="token punctuation">,</span>
    <span class="token number">6</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">,</span>
    <span class="token number">7</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Sunday&quot;</span><span class="token punctuation">,</span>
    _ <span class="token operator">=&gt;</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">test_char</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token keyword">match</span> c <span class="token punctuation">{</span>
        <span class="token char">&#39;1&#39;</span><span class="token punctuation">..=</span><span class="token char">&#39;9&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">,</span>
        <span class="token char">&#39;a&#39;</span><span class="token punctuation">..=</span><span class="token char">&#39;z&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;lower letter&quot;</span><span class="token punctuation">,</span>
        <span class="token char">&#39;A&#39;</span><span class="token punctuation">..=</span><span class="token char">&#39;Z&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;upper letter&quot;</span><span class="token punctuation">,</span>
        _ <span class="token operator">=&gt;</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-loop" tabindex="-1"><a class="header-anchor" href="#for-loop" aria-hidden="true">#</a> for loop</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// (1) str || string:</span>
        a<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span>
        b<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span>
<span class="token comment">// (2) array || vector:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// set or get</span>
        <span class="token keyword">for</span> v <span class="token keyword">in</span> nums <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment">// get</span>
        <span class="token keyword">for</span> v <span class="token keyword">in</span> nums<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// get</span>
        <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> nums <span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token comment">// set or get</span>
        <span class="token keyword">for</span> v <span class="token keyword">in</span> nums<span class="token punctuation">.</span><span class="token function">iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// set or get</span>
<span class="token comment">// (3) hashmap:</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>map <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>example</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// &amp;str || String</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">for_str</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;|\\x1b[96m{:?}\\x1b[0m| =&gt; {{ &quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?} &quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// array || vector</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">for_array</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;|\\x1b[96m{:?}\\x1b[0m| =&gt; &quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;[ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> i <span class="token operator">!=</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
            <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot; ]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token attribute attr-name">#[test]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">test_for</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">for_str</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">for_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// output: { &#39;h&#39; &#39;e&#39; &#39;l&#39; &#39;l&#39; &#39;o&#39; &#39; &#39; &#39;w&#39; &#39;o&#39; &#39;r&#39; &#39;l&#39; &#39;d&#39; }</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> vector<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">for_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">for_array</span><span class="token punctuation">(</span>vector<span class="token punctuation">.</span><span class="token function">as_mut_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// output: [1, 2, 3, 4, 5]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-loop" tabindex="-1"><a class="header-anchor" href="#while-loop" aria-hidden="true">#</a> While loop</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// Infinite loop</span>
<span class="token keyword">fn</span> <span class="token function-definition function">loop_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> count<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{} &quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">6</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 0 1 2 3 4 5</span>

<span class="token comment">// While loop</span>
<span class="token keyword">fn</span> <span class="token function-definition function">while_loop_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> count<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token punctuation">{</span>
        <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{} &quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 0 1 2 3 4 5</span>

<span class="token keyword">fn</span> <span class="token function-definition function">for_range_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// For Range</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">6</span> <span class="token punctuation">{</span>
        <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{} &quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 0 1 2 3 4 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="core" tabindex="-1"><a class="header-anchor" href="#core" aria-hidden="true">#</a> Core</h2><h3 id="str" tabindex="-1"><a class="header-anchor" href="#str" aria-hidden="true">#</a> str</h3><blockquote><p>\u5B57\u7B26\u4E32\u5207\u7247, \u7531\u957F\u5EA6\u548C\u6307\u9488\u6784\u6210</p></blockquote><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// &amp;str \u662FString \u7684\u5207\u7247\u7C7B\u578B\u3002</span>
<span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// len  : 5</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// bytes: [104, 101, 108, 108, 111]</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:p}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// ptr  : 0x1026b6760</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:p}&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// &amp;s   : 0x16dce2f08</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// false</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// hello</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// hellohello</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// hellohello</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">to_uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &quot;HELLO&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>for example</strong></p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// &amp;str \u4F20\u503C</span>
<span class="token keyword">fn</span> <span class="token function-definition function">hi</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hi &quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>&amp;str - String</strong></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> first_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;Pascal&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> last_name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">greet</span><span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>last_name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`last_name\` is passed by reference</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, {}!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><blockquote><p>\u957F\u5EA6\u3001\u5BB9\u91CF\u548C\u6307\u9488\u6784\u6210</p></blockquote><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// init</span>
<span class="token keyword">let</span> s<span class="token punctuation">:</span>  <span class="token operator">&amp;</span><span class="token keyword">str</span>   <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// methods</span>
s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span>
s<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span>

s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span>ss<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">)</span>

s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">// iter</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// iter-enum</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">/// init array</span>
<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// init vector</span>
<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// array -&gt; vector</span>



<span class="token comment">// for loop</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// get: print!(&quot;{} &quot;, nums[i]);</span>
    <span class="token comment">// set: nums[i] += 1;</span>
<span class="token punctuation">}</span>



<span class="token comment">/// sort</span>
nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// [-5, -3, 1, 2, 4, 32]</span>
nums<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [-5, -3, 1, 2, 4, 32]</span>
<span class="token comment">/// reverse sort</span>
nums<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> b<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [32, 4, 2, 1, -3, -5]</span>
<span class="token comment">/// sort by string</span>
nums<span class="token punctuation">.</span><span class="token function">sort_by_cached_key</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>k<span class="token closure-punctuation punctuation">|</span></span> k<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [-3, -5, 1, 2, 32, 4]</span>
<span class="token comment">/// shuffle</span>
<span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
nums<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// [4, -3, 2, -5, 32, 1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>array as params of funciton</strong></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">for_array</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// --snip--</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> vector<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">for_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">for_array</span><span class="token punctuation">(</span>vector<span class="token punctuation">.</span><span class="token function">as_mut_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> Vector</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// --init--</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// --methods--</span>
\u589E\uFF1A<span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
\u5220\uFF1A<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
\u67E5\uFF1Anums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span>
\u6539\uFF1Anums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v

\u957F\u5EA6\uFF1A<span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
\u6253\u5370\uFF1A<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;nums: {:?}&quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> Hashmap</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// init</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> map<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// methods</span>
map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// for-loop</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> map <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}: {}&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple" aria-hidden="true">#</a> Tuple</h3><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> x<span class="token number">.0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> x<span class="token number">.1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token keyword">u8</span>  <span class="token operator">=</span> x<span class="token number">.2</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="oop" tabindex="-1"><a class="header-anchor" href="#oop" aria-hidden="true">#</a> OOP</h2><h3 id="funciton" tabindex="-1"><a class="header-anchor" href="#funciton" aria-hidden="true">#</a> Funciton</h3>`,66),g=n("div",{class:"language-rust ext-rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"hello"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hello world!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),y=n("div",{class:"language-rust ext-rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},'// hello("John Smith")'),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"hello"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"str"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hi "'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(" name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),f=n("div",{class:"language-rust ext-rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},'// hey("John Smith".to_string())'),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"hey"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},'"hey "'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token operator"},"&"),s("name"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"max"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"i32"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"if"),s(" a "),n("span",{class:"token operator"},">"),s(" b "),n("span",{class:"token punctuation"},"{"),s("a"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s("b"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),h=n("div",{class:"language-rust ext-rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},'// let (a, b) = info("John Smith", 21)'),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"info"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"str"),n("span",{class:"token punctuation"},","),s(" age"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"i32"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"my name is "'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(" name"),n("span",{class:"token punctuation"},","),s(" age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),w=n("h3",{id:"struct",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#struct","aria-hidden":"true"},"#"),s(" Struct")],-1),q=n("div",{class:"language-rust ext-rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"// 1 struct\uFF1A fields"),s(`
`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(`
    age`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),_=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"// 2 supper\uFF1A to inherit the basic structure."),s(`
`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(`
    age`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Cat"),s(),n("span",{class:"token punctuation"},"{"),s(`
    supper`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Animal"),n("span",{class:"token punctuation"},","),s("     "),n("span",{class:"token comment"},"/// inherit"),s(`
    type_name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"// 3 impl\uFF1A methods"),s(`
`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Rectangle"),s(),n("span",{class:"token punctuation"},"{"),s(`
    width`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),n("span",{class:"token punctuation"},","),s(`
    height`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token keyword"},"impl"),s(),n("span",{class:"token class-name"},"Rectangle"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"new"),n("span",{class:"token punctuation"},"("),s("w"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),n("span",{class:"token punctuation"},","),s(" h"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Rectangle"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s("  "),n("span",{class:"token class-name"},"Rectangle"),s(),n("span",{class:"token punctuation"},"{"),s("  width"),n("span",{class:"token punctuation"},":"),s(" w"),n("span",{class:"token punctuation"},","),s("  height"),n("span",{class:"token punctuation"},":"),s(" h "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"area"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"u32"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),s("width "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),s(`height
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"can_hold"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" other"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"Rectangle"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),s("width "),n("span",{class:"token operator"},">"),s(" other"),n("span",{class:"token punctuation"},"."),s("width "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),s("height "),n("span",{class:"token operator"},">"),s(" other"),n("span",{class:"token punctuation"},"."),s(`height
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"square"),n("span",{class:"token punctuation"},"("),s("size"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"Self"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"Self"),s(),n("span",{class:"token punctuation"},"{"),s(" width"),n("span",{class:"token punctuation"},":"),s(" size"),n("span",{class:"token punctuation"},","),s(" height"),n("span",{class:"token punctuation"},":"),s(" size "),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_impl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" rect1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Rectangle"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// code"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"/// impl methods"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"area: {} "'),n("span",{class:"token punctuation"},","),s(" rect1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"area"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" rect2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Rectangle"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"12"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{} {}"'),n("span",{class:"token punctuation"},","),s(" rect"),n("span",{class:"token punctuation"},"."),s("height"),n("span",{class:"token punctuation"},","),s(" rect"),n("span",{class:"token punctuation"},"."),s("width"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"// trait: different structs use the same methods."),s(`
`),n("span",{class:"token comment"},"// a) trait_name::struct_name::impl_for_method();"),s(`
`),n("span",{class:"token comment"},"// b) struct_ini.impl_for_method()"),s(`

`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Tweet"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// code"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"NewsArticle"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// code"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"trait"),s(),n("span",{class:"token type-definition class-name"},"Summary"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"summarize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"impl"),s(),n("span",{class:"token class-name"},"Summary"),s(),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token class-name"},"Tweet"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"summarize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// code"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"impl"),s(),n("span",{class:"token class-name"},"Summary"),s(),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token class-name"},"NewsArticle"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"summarize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// code"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_trait_summary"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" tweet "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Tweet"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// code"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" article "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"NewsArtic"),s(`
        `),n("span",{class:"token comment"},"// code"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s(" article"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"summarize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s(" tweet"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"summarize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"/// use trait method;"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Summary"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"summarize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("article"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Summary"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"summarize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("tweet"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=n("h3",{id:"template",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#template","aria-hidden":"true"},"#"),s(" Template")],-1),C=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"max"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"PartialOrd"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"T"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"if"),s(" a "),n("span",{class:"token operator"},">"),s(" b "),n("span",{class:"token punctuation"},"{"),s("a"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s("b"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"largest"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"PartialOrd"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("list"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" largest "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("list"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"for"),s(" item "),n("span",{class:"token keyword"},"in"),s(" list "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" item "),n("span",{class:"token operator"},">"),s(" largest "),n("span",{class:"token punctuation"},"{"),s(`
            largest `),n("span",{class:"token operator"},"="),s(" item"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"return"),s(` largest
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{:?}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 7"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_largest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" vec_nums "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"34"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"65"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" vec_char "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token char"},"'y'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'m'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'a'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'q'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"output: {:?}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"largest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("vec_nums"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 100"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"output: {:?}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"largest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("vec_char"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 'y'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Point"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"X1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"Y1"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{"),s(`
    x`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token constant"},"X1"),n("span",{class:"token punctuation"},","),s(`
    y`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token constant"},"Y1"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"impl"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"X1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"Y1"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Point"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"X1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"Y1"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"new"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token constant"},"X1"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token constant"},"Y1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Point"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"X1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"Y1"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Point"),s(),n("span",{class:"token punctuation"},"{"),s(" x"),n("span",{class:"token punctuation"},","),s("  y"),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"mix"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"X2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"Y2"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" other"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Point"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"X2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"Y2"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Point"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"X1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"Y2"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Point"),s(),n("span",{class:"token punctuation"},"{"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(" other"),n("span",{class:"token punctuation"},"."),s("y "),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_struct_temp"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" integer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Point"),s(),n("span",{class:"token punctuation"},"{"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" float "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Point"),s(),n("span",{class:"token punctuation"},"{"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1.0"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"4.0"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" int_float "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Point"),s(),n("span",{class:"token punctuation"},"{"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"4.0"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token keyword"},"i32"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`


    `),n("span",{class:"token keyword"},"let"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Point"),s(),n("span",{class:"token punctuation"},"{"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"point: ({}, {})"'),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},"."),s("x"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},"."),s("y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// point: (5, 10)"),s(`

    `),n("span",{class:"token keyword"},"let"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Point"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"point: ({}, {})"'),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},"."),s("x"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},"."),s("y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// point: (3, 6)"),s(`


    `),n("span",{class:"token keyword"},"let"),s(" p1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Point"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10.4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" p2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Point"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'c'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" p3 "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"mix"),n("span",{class:"token punctuation"},"("),s("p2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"point: ({:?}, {:?})"'),n("span",{class:"token punctuation"},","),s(" p3"),n("span",{class:"token punctuation"},"."),s("x"),n("span",{class:"token punctuation"},","),s(" p3"),n("span",{class:"token punctuation"},"."),s("y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// point: (5, 'c')"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=o(`<h3 id="macros" tabindex="-1"><a class="header-anchor" href="#macros" aria-hidden="true">#</a> Macros</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[macro_export]</span>
<span class="token macro property">macro_rules!</span> vector <span class="token punctuation">{</span>
    <span class="token punctuation">(</span> $<span class="token punctuation">(</span> <span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> temp_vec <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            $<span class="token punctuation">(</span>
                temp_vec<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">)</span><span class="token operator">*</span>
            temp_vec
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[macro_export]</span>
<span class="token macro property">macro_rules!</span> hashmap <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">:</span> expr <span class="token operator">=&gt;</span> <span class="token variable">$val</span><span class="token punctuation">:</span> expr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> temp_map <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            $<span class="token punctuation">(</span>
                temp_map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">)</span><span class="token operator">*</span>
             temp_map
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">type_name</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token namespace">std<span class="token punctuation">::</span>any<span class="token punctuation">::</span></span><span class="token function">type_name</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[macro_export]</span>
<span class="token macro property">macro_rules!</span> type_of <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;[{}, {}]&quot;</span><span class="token punctuation">,</span> <span class="token macro property">file!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">line!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;[\\x1b[92m{}\\x1b[0m, {}], \\x1b[93m\${:14}\\x1b[0m: {}&quot;</span><span class="token punctuation">,</span>
            <span class="token macro property">file!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">line!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">stringify!</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">type_name</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">test_vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vector!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">test_hashmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token macro property">hashmap!</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;three&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;map {:?} &quot;</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// map {2: &quot;two&quot;, 3: &quot;three&quot;, 1: &quot;one&quot;}</span>

<span class="token attribute attr-name">#[test]</span>

<span class="token keyword">fn</span> <span class="token function-definition function">test_typeof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">type_name</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// i32</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">type_name</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// f64</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">type_name</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// bool</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">type_name</span><span class="token punctuation">(</span><span class="token char">&#39;k&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// char</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">type_name</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// &amp;str</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">type_name</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// [i32; 3]</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">type_name</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// alloc::vec::Vec&lt;i32&gt;</span>

    <span class="token macro property">type_of!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// [src/main.rs, 27]</span>
    <span class="token macro property">type_of!</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// [src/main.rs, 28] $12            : i32</span>
    <span class="token macro property">type_of!</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [src/main.rs, 29] $vec![1, 3, 5] : alloc::vec::Vec&lt;i32&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cargo" tabindex="-1"><a class="header-anchor" href="#cargo" aria-hidden="true">#</a> Cargo</h2><div class="language-bash ext-sh"><pre class="language-bash"><code>$ cargo new rust-hello
$ cargo build
$ cargo run
$ cargo update
</code></pre></div><h3 id="cargo-build" tabindex="-1"><a class="header-anchor" href="#cargo-build" aria-hidden="true">#</a> cargo build</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># debug(\u8C03\u8BD5)\u6A21\u5F0F(\u9ED8\u8BA4)</span>
<span class="token comment"># \u7F16\u8BD1\u65F6\u95F4\u8F83\u77ED\uFF0C\u56E0\u4E3A\u7F16\u8BD1\u5668\u4E0D\u8FDB\u884C\u4F18\u5316\uFF0C\u4F46\u4EE3\u7801\u8FD0\u884C\u901F\u5EA6\u8F83\u6162</span>
$ cargo build

<span class="token comment"># \u5C06\u7ED3\u679C\u4E8C\u8FDB\u5236\u6587\u4EF6\u653E\u5165target/release\uFF0C\u800C\u4E0D\u518D\u662Ftarget/debug\u76EE\u5F55</span>
<span class="token comment"># \u53D1\u5E03(release)\u6A21\u5F0F\u7F16\u8BD1\u9700\u8981\u66F4\u957F\u65F6\u95F4\uFF0C\u4F46\u4EE3\u7801\u8FD0\u884C\u901F\u5EA6\u66F4\u5FEB</span>
$ cargo build --release
</code></pre></div><h3 id="cargo-test" tabindex="-1"><a class="header-anchor" href="#cargo-test" aria-hidden="true">#</a> cargo test</h3><h4 id="\u4F7F\u7528\u672C\u9879\u76EE\u6D4B\u8BD5" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u672C\u9879\u76EE\u6D4B\u8BD5" aria-hidden="true">#</a> \u4F7F\u7528\u672C\u9879\u76EE\u6D4B\u8BD5</h4>`,8),P=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[s("$ tree "),n("span",{class:"token builtin class-name"},"."),s(`
`),n("span",{class:"token builtin class-name"},"."),s(`
\u251C\u2500\u2500 Cargo.lock
\u251C\u2500\u2500 Cargo.toml
\u251C\u2500\u2500 src
\u2502   \u251C\u2500\u2500 plus.rs
\u2502   \u251C\u2500\u2500 int_rle.rs
`),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token operator"},"|"),s(`\u2500\u2500 macros
`),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token operator"},"|"),s(`   \u2514\u2500\u2500 vector.rs
\u2502   \u2514\u2500\u2500 lib.rs
\u2514\u2500\u2500 tests
    \u2514\u2500\u2500 test_plus.rs
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-toml ext-toml"},[n("pre",{class:"language-toml"},[n("code",null,[n("span",{class:"token comment"},"# Cargo.toml"),s(`
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"package"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token key property"},"name"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"rust_lib"'),s(`
`),n("span",{class:"token key property"},"version"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"0.1.0"'),s(`
`),n("span",{class:"token key property"},"edition"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"2021"'),s(`

`),n("span",{class:"token comment"},"# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html"),s(`

`),n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"dependencies"),n("span",{class:"token punctuation"},"]"),s(`
`)])])],-1),H=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"// src/lib.rs"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"plus"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"int_rle"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"macros"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// plus.rs"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"add"),n("span",{class:"token punctuation"},"("),s("left"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"usize"),s(),n("span",{class:"token punctuation"},"{"),s(`
    left `),n("span",{class:"token operator"},"+"),s(` right
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// int_rle.rs"),s(`
`),n("span",{class:"token attribute attr-name"},"#[derive(Debug, PartialEq)]"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"IntRle"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"pub"),s(" values"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"i32"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token comment"},"// src/macros/vector.rs"),s(`
`),n("span",{class:"token attribute attr-name"},"#[macro_export]"),s(`
`),n("span",{class:"token macro property"},"macro_rules!"),s(" vector "),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token punctuation"},"("),s("$"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"$x"),n("span",{class:"token punctuation"},":"),n("span",{class:"token fragment-specifier punctuation"},"expr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" temp_vec "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            $`),n("span",{class:"token punctuation"},"("),s(`
                temp_vec`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"$x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"*"),s(`
            temp_vec
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"example"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vector!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"vec {:?}"'),n("span",{class:"token punctuation"},","),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"/* tests/test_plus.rs */"),s(`

`),n("span",{class:"token keyword"},"extern"),s(),n("span",{class:"token keyword"},"crate"),s(),n("span",{class:"token module-declaration namespace"},"rust_lib"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("rust_lib"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token attribute attr-name"},"#[cfg(test)]"),s(`
`),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"tests"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_works"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"super"),n("span",{class:"token module-declaration namespace"},[n("span",{class:"token punctuation"},"::"),s("plus"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_int_rle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"super"),n("span",{class:"token module-declaration namespace"},[n("span",{class:"token punctuation"},"::"),s("int_rle"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"IntRle"),s(),n("span",{class:"token punctuation"},"{"),s(" values"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_macros_vector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"super"),n("span",{class:"token module-declaration namespace"},[n("span",{class:"token punctuation"},"::"),s("macros"),n("span",{class:"token punctuation"},"::"),s("vector"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"example"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("$ cargo "),n("span",{class:"token builtin class-name"},"test"),s(`
`),n("span",{class:"token comment"},"# cargo test -doc"),s(`

`),n("span",{class:"token comment"},"# running 3 tests"),s(`
`),n("span",{class:"token comment"},"# test tests::it_works ... ok"),s(`
`),n("span",{class:"token comment"},"# test tests::test_int_rle ... ok"),s(`
`),n("span",{class:"token comment"},"# test tests::test_macros_vector... ok"),s(`

`),n("span",{class:"token comment"},"# test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s"),s(`
`)])])],-1),J=o(`<h3 id="cargo-update" tabindex="-1"><a class="header-anchor" href="#cargo-update" aria-hidden="true">#</a> cargo update</h3><div class="language-bash ext-sh"><pre class="language-bash"><code>$ cargo update           <span class="token comment"># updates all dependencies</span>
$ cargo update -p rand   <span class="token comment"># updates just \u201Crand\u201D</span>
</code></pre></div><h3 id="cargo-toml" tabindex="-1"><a class="header-anchor" href="#cargo-toml" aria-hidden="true">#</a> Cargo.toml</h3><ol><li>step-1</li></ol><div class="language-text ext-text"><pre class="language-text"><code>[dependencies]
time = &quot;0.1.12&quot;
regex = &quot;0.1.41&quot;
</code></pre></div><ol start="2"><li>step-2</li></ol><div class="language-bash ext-sh"><pre class="language-bash"><code>$ cargo build
<span class="token comment"># cargo run</span>
</code></pre></div><p>\u91CD\u65B0\u8FD0\u884Ccargo build\uFF0CCargo \u5C06\u83B7\u53D6\u65B0\u7684\u4F9D\u8D56\u9879\u53CA\u5176\u6240\u6709\u4F9D\u8D56\u9879\uFF0C\u5C06\u5B83\u4EEC\u5168\u90E8\u7F16\u8BD1\uFF0C\u7136\u540E\u66F4\u65B0Cargo.lock</p><ol start="3"><li>step-3: \u8C03\u7528\u7B2C\u4E09\u65B9\u5E93</li></ol><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">regex</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Regex</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> re <span class="token operator">=</span> <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">r&quot;^\\d{4}-\\d{2}-\\d{2}$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Did our date match? {}&quot;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span><span class="token function">is_match</span><span class="token punctuation">(</span><span class="token string">&quot;2014-01-01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="cargo-lock" tabindex="-1"><a class="header-anchor" href="#cargo-lock" aria-hidden="true">#</a> Cargo.lock</h3><p>\u53EF\u5220\u9664\uFF0Ccargo run / cargo build\u4F1A\u91CD\u65B0\u7F16\u8BD1\u8BE5\u6587\u4EF6</p><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> target</h3><p>\u53EF\u5220\u9664\uFF0C\u7F16\u8BD1\u6587\u4EF6\u5B58\u653E\u4E8E\u6B64, cargo run / cargo build\u4F1A\u91CD\u65B0\u7F16\u8BD1\u8BE5\u6587\u4EF6</p><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="\u53D6\u6D88rust\u4EE3\u7801\u6298\u53E0" tabindex="-1"><a class="header-anchor" href="#\u53D6\u6D88rust\u4EE3\u7801\u6298\u53E0" aria-hidden="true">#</a> \u53D6\u6D88rust\u4EE3\u7801\u6298\u53E0</h3><div class="language-markdown ext-md"><pre class="language-markdown"><code>step-1: clion-preference
step-2: Editor-General-Code Folding-<span class="token code-snippet code keyword">\`Rust\`</span>--<span class="token code-snippet code keyword">\`One line method\`</span>
step-3: \u53D6\u6D88\u52FE\u9009-apply\u5373\u53EF
</code></pre></div><p><img src="`+m+`" alt=""></p><h3 id="rustup" tabindex="-1"><a class="header-anchor" href="#rustup" aria-hidden="true">#</a> rustup</h3><div class="language-bash ext-sh"><pre class="language-bash"><code>$ rustup --version      <span class="token comment"># rustup -V</span>
$ rustup update
$ rustup self uninstall
</code></pre></div><h3 id="cargo-1" tabindex="-1"><a class="header-anchor" href="#cargo-1" aria-hidden="true">#</a> cargo</h3><div class="language-bash ext-sh"><pre class="language-bash"><code>$ cargo --version
$ cargo new rust-hello
$ cargo build
$ cargo run
$ cargo <span class="token builtin class-name">test</span>
$ cargo check
</code></pre></div><h3 id="color" tabindex="-1"><a class="header-anchor" href="#color" aria-hidden="true">#</a> color</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[90m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 90: grey</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[91m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 91: red</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[92m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 92: green</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[93m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 93: yellow</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[94m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 94: blue</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[95m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 95: purple</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[96m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 96: cyan</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[97m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 97: white</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\x1b[98m{}\\x1b[0m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[Error]: not found the function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 98: light white (normal)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function I(O,A){const p=c("CodeGroupItem"),e=c("CodeGroup");return u(),i(k,null,[b,a(e,null,{default:t(()=>[a(p,{title:"default"},{default:t(()=>[g]),_:1}),a(p,{title:"params"},{default:t(()=>[y]),_:1}),a(p,{title:"return"},{default:t(()=>[f]),_:1}),a(p,{title:"multi-return-value"},{default:t(()=>[h]),_:1})]),_:1}),w,a(e,null,{default:t(()=>[a(p,{title:"field"},{default:t(()=>[q]),_:1}),a(p,{title:"inherit"},{default:t(()=>[_]),_:1}),a(p,{title:"method"},{default:t(()=>[x]),_:1}),a(p,{title:"trait"},{default:t(()=>[S]),_:1})]),_:1}),$,a(e,null,{default:t(()=>[a(p,{title:"temp-function"},{default:t(()=>[C]),_:1}),a(p,{title:"temp-struct"},{default:t(()=>[V]),_:1})]),_:1}),z,a(e,null,{default:t(()=>[a(p,{title:"tree"},{default:t(()=>[P]),_:1}),a(p,{title:"Cargo.toml"},{default:t(()=>[T]),_:1}),a(p,{title:"src/..."},{default:t(()=>[H]),_:1}),a(p,{title:"tests/..."},{default:t(()=>[R]),_:1}),a(p,{title:"terminal"},{default:t(()=>[E]),_:1})]),_:1}),J],64)}var X=l(v,[["render",I],["__file","rust.html.vue"]]);export{X as default};
