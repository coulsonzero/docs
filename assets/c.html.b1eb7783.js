import{_ as n,e as s}from"./app.afb47d0b.js";const a={},p=s(`<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Output: Hello, World!</span>
</code></pre></div><h3 id="variable-constant" tabindex="-1"><a class="header-anchor" href="#variable-constant" aria-hidden="true">#</a> Variable - Constant</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// variable</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">// constant</span>
<span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>


<span class="token comment">// multi-var</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// assign value</span>
y <span class="token operator">=</span> x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="data-type" tabindex="-1"><a class="header-anchor" href="#data-type" aria-hidden="true">#</a> Data Type</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// integer  \u3010\u4FEE\u9970\uFF1Ashort, long, unsigned(\u6B63\u6570), signed(\u6B63\u8D1F\u6570\u5747\u53EF)\u3011</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">// \u6D6E\u70B9\u6570\uFF1Afloat\u3001double\u3001long double</span>
<span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">123.672</span><span class="token punctuation">;</span>

<span class="token comment">// char</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// string</span>
<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tom Smith&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F3A\u5236\u8F6C\u6362</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">123.67</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 123</span>
</code></pre></div><p>\u5185\u5B58\u5360\u7528\u5927\u5C0F</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">// sizeof()</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size (short): %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 2</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size   (int): %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size  (long): %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 8</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size (float): %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size(double): %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 8</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size  (char): %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size(string): %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 10</span>
</code></pre></div><h3 id="output-input" tabindex="-1"><a class="header-anchor" href="#output-input" aria-hidden="true">#</a> Output - Input</h3><p><strong>input</strong></p><div class="language-c ext-c"><pre class="language-c"><code><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// char</span>
<span class="token function">gets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// string</span>
<span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// important</span>
</code></pre></div><p>example</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">fget</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token keyword">float</span> price<span class="token punctuation">;</span>
<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %f %c %[^\\n]s&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> price<span class="token punctuation">,</span> c<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>output</strong></p><div class="language-c ext-c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// append a char</span>
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// append a string</span>
<span class="token function">fput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>example</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;int: %d, float: %f, double: %.2f, character: %c, string: %s&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> price<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> letter<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output: hello-world</span>

<span class="token function">fput</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// This is a single line comments.</span>

<span class="token comment">/*
    * This is a multi-line comments.
    * 1. ***
    * 2. ***
    */</span>

<span class="token comment">/**
 * This is a documents comments.
 * @author: shville
 * @date: 2023-06-11
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operator" tabindex="-1"><a class="header-anchor" href="#operator" aria-hidden="true">#</a> Operator</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">/**
 * arithmetic operators : + - *  / %
 * assignment operators : += -= *= /= %=
 * increment &amp; Decrement: i++ i-- ++i --i
 * comparison operators : == != &lt; &gt; &lt;= &gt;=
 * &amp;&amp; || !
 * a ? b : c
 */</span>

</code></pre></div><h2 id="core" tabindex="-1"><a class="header-anchor" href="#core" aria-hidden="true">#</a> Core</h2><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
</code></pre></div><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">// init</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>    <span class="token comment">// size: 6</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-c ext-c"><pre class="language-c"><code><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token function">strcat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span>
<span class="token keyword">sizeof</span> s

<span class="token comment">// assign (error: s = &quot;Tmo&quot;)</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;Batman Joker&quot;</span><span class="token punctuation">)</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;Batman Joker&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>string input-output</strong></p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a text line: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// scanf(&quot;%[^\\n]s&quot;, s);</span>
<span class="token function">fputs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// printf(&quot;%s\\n&quot;, s);</span>
</code></pre></div><p><strong>string-int</strong></p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
</code></pre></div><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;120&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>   <span class="token comment">// 120</span>
</code></pre></div><p><strong>char</strong></p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span></span>
</code></pre></div><div class="language-c ext-c"><pre class="language-c"><code><span class="token function">toupper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// c-&#39;a&#39;+&#39;A&#39;</span>
<span class="token function">tolower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// c-&#39;A&#39;+&#39;a&#39;</span>
</code></pre></div><h3 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// array init</span>
<span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nums<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">// change element</span>
nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
<span class="token comment">// print the value of element</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;nums[1]: %d\\n&quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 9</span>

<span class="token comment">// iter</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%d]: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// two-dimensional arrays</span>
<span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pointer" tabindex="-1"><a class="header-anchor" href="#pointer" aria-hidden="true">#</a> Pointer</h3><p><strong>pointer-variable</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span>

ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 12</span>
ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>y<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 3.14</span>
ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>pointer-function</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span><span class="token operator">*</span>  <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;output: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 36</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span><span class="token operator">*</span>  <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>num<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>pointer-function-template</strong></p><div class="language-c ext-c"><pre class="language-c"><code>
</code></pre></div><h2 id="preprocessor" tabindex="-1"><a class="header-anchor" href="#preprocessor" aria-hidden="true">#</a> preprocessor</h2><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">/**
 * preprocessor
 * #include
 * #define, #undef
 * #ifdef, #ifndef, #if, #elif, #else, #endif
 * #pragma
 * #error, #warning
 */</span>
</code></pre></div><h3 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> #define</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">// define a var</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>
<span class="token comment">// define a function</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">AREA</span><span class="token expression"><span class="token punctuation">(</span>r<span class="token punctuation">)</span> PI<span class="token operator">*</span>r<span class="token operator">*</span>r</span></span>
<span class="token comment">// define a template</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__Tmp__</span> <span class="token expression">template <span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span></span></span>
</code></pre></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* == grammar == */</span>

<span class="token comment">// a) line break \`\\\`</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERY_LONG_CONSTANT</span> <span class="token punctuation">\\</span>
<span class="token expression"><span class="token number">23.678901</span></span></span>

<span class="token comment">// b) ignore space</span>
<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">define</span> <span class="token macro-name function">SQUARE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression">x<span class="token operator">*</span>x</span></span>

<span class="token comment">// c) bracket \`()\`</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>example</summary><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">AREA</span><span class="token expression"><span class="token punctuation">(</span>r<span class="token punctuation">)</span> PI<span class="token operator">*</span>r<span class="token operator">*</span>r</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERY_LONG_CONSTANT</span> <span class="token punctuation">\\</span>
<span class="token expression"><span class="token number">23.678901</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">define</span> <span class="token macro-name function">SQUARE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
     <span class="token expression">x<span class="token operator">*</span>x</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> r <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;PI: %3.2f\\n&quot;</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 3.14</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Area: %5.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">AREA</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 12.56</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 5</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="define-pre" tabindex="-1"><a class="header-anchor" href="#define-pre" aria-hidden="true">#</a> #define pre</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span><span class="token punctuation">,</span> <span class="token constant">__DATE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;This is a line %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;File Name: %s\\n&quot;</span><span class="token punctuation">,</span> __FILE_NAME__<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// int std_c;</span>
<span class="token comment">// std_c = __STDC__;</span>
<span class="token comment">// printf(&quot;STDC is %d\\n&quot;, std_c);</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;STDC is %d\\n&quot;</span><span class="token punctuation">,</span> __STDC__<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="ifndef" tabindex="-1"><a class="header-anchor" href="#ifndef" aria-hidden="true">#</a> #ifndef</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression"><span class="token operator">/</span> #ifndef</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token operator">/</span> #undef</span></span>
</code></pre></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 1. #ifndef</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">TERM</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TERM</span> <span class="token expression"><span class="token number">24</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// 2. #ifdef</span>
<span class="token comment">// #ifdef RATE</span>
<span class="token comment">//     #undef RATE</span>
<span class="token comment">//     #define RATE 0.068</span>
<span class="token comment">// #else</span>
<span class="token comment">//     #define RATE 0.068</span>
<span class="token comment">// #endif</span>

<span class="token comment">// 2. #ifdef-#undef-#endif</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">RATE</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">RATE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RATE</span> <span class="token expression"><span class="token number">0.068</span></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TRIPLE</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQR</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TRIPLE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-statement" tabindex="-1"><a class="header-anchor" href="#if-statement" aria-hidden="true">#</a> #if-statement</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">// 1. #if-statement: only print once result.</span>
<span class="token comment">// 2. #if defined(LEVEL)  =  #ifdef LEVEL</span>
<span class="token comment">//    #if !defined(LEVEL) =  #ifndef LEVEL</span>
</code></pre></div><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre></div><details class="custom-container details"><summary>example</summary><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVEL</span> <span class="token expression"><span class="token number">7</span></span></span>

<span class="token comment">// 1. #if-statement: only print once result.</span>
<span class="token comment">// 2. #if defined(LEVEL)  =  #ifdef LEVEL</span>
<span class="token comment">//    #if !defined(LEVEL) =  #ifndef LEVEL</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// only exec once</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">LEVEL <span class="token operator">&gt;</span> <span class="token number">6</span></span></span>
        <span class="token comment">// statement</span>
        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">LEVEL <span class="token operator">&gt;</span> <span class="token number">5</span></span></span>
        <span class="token comment">// statement</span>
        num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">LEVEL <span class="token operator">&gt;</span> <span class="token number">4</span></span></span>
        <span class="token comment">// statement</span>
        num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token comment">// statement</span>
        num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num: %d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// output: 1</span>


    <span class="token comment">// defined()</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_CLASS<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>LEVEL<span class="token punctuation">)</span></span></span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defined lever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;not defined&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token comment">// output: defined lever</span>



    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LEVEL</span></span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;not defined lever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defined lever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token comment">// output: defined lever</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="macro-operator" tabindex="-1"><a class="header-anchor" href="#macro-operator" aria-hidden="true">#</a> macro-operator</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">// #x -&gt; &quot;x&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TO_STR</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>       #x</span></span>
<span class="token comment">// x##y -&gt; xy   is a variable</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">VAR</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span>  name</span><span class="token punctuation">##</span><span class="token expression">num   </span><span class="token comment">// VAR(x, 3)    -&gt; x3</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CONCAT</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    x</span><span class="token punctuation">##</span><span class="token expression">y        </span><span class="token comment">// CONCAT(x, y) -&gt; xy</span></span>
</code></pre></div><details class="custom-container details"><summary>example</summary><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token comment">// #x: stringification operator(convert a parameter to a string constant).</span>
<span class="token comment">// #x -&gt; &quot;x&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TO_STR</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>       #x</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">STRLEN</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>       <span class="token function">strlen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span></span>
<span class="token comment">// x##y -&gt; xy   is a variable</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">VAR</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span>  name</span><span class="token punctuation">##</span><span class="token expression">num   </span><span class="token comment">// VAR(x, 3)    -&gt; x3</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CONCAT</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    x</span><span class="token punctuation">##</span><span class="token expression">y        </span><span class="token comment">// CONCAT(x, y) -&gt; xy</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">TO_STR</span><span class="token punctuation">(</span><span class="token number">123</span>\\<span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 123</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">TO_STR</span><span class="token punctuation">(</span><span class="token number">123</span>\\\\<span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 123\\12</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">TO_STR</span><span class="token punctuation">(</span><span class="token number">123</span>\\\\\\<span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// \`123\\\`</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">TO_STR</span><span class="token punctuation">(</span><span class="token number">123</span>\\\\\\\\<span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 123\\\\12</span>


    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span><span class="token function">TO_STR</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// strlen(&quot;12345&quot;): 5</span>

    <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">,</span> x3 <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">VAR</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// x1: 125</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">VAR</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// x2: 250</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">VAR</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// x3: 500</span>

    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">CONCAT</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>       <span class="token comment">// CONCAT(x, y) -&gt; xy = x + y</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> xy<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 9</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> #error</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>LEVEL<span class="token punctuation">)</span></span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">&quot;_DARWIN_UNLIMITED_STREAMS specified, but -miphoneos-version-min version does not support it.&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">&quot;_DARWIN_UNLIMITED_STREAMS specified, but -mmacosx-version-min version does not support it.&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre></div>`,68);function t(e,o){return p}var i=n(a,[["render",t],["__file","c.html.vue"]]);export{i as default};
