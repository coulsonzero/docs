import{_ as n,e as s}from"./app.afb47d0b.js";const a={},t=s(`<h1 id="kotlin" tabindex="-1"><a class="header-anchor" href="#kotlin" aria-hidden="true">#</a> Kotlin</h1><h2 id="basic-concepts" tabindex="-1"><a class="header-anchor" href="#basic-concepts" aria-hidden="true">#</a> Basic Concepts</h2><h3 id="intro" tabindex="-1"><a class="header-anchor" href="#intro" aria-hidden="true">#</a> intro</h3><p>used to develop Android App</p><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello World!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types" aria-hidden="true">#</a> Data Types</h3><ul><li>Int</li><li>Double</li><li>Boolean</li><li>Char</li></ul><h3 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h3><ul><li>\u53D8\u91CF</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u53D8\u91CF: var</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> num<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">var</span> course<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span>
</code></pre></div><ul><li>\u5E38\u91CF</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u5E38\u91CF: val</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> num <span class="token operator">=</span> <span class="token number">12</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Kotlin\u652F\u6301\u7C7B\u578B\u81EA\u52A8\u63A8\u65AD</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> num <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">val</span> course <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span>
</code></pre></div><h3 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h3><ul><li>Arithmetic Operators</li></ul><div class="language-markdown ext-md"><pre class="language-markdown"><code><span class="token list punctuation">+</span> <span class="token list punctuation">-</span> <span class="token list punctuation">*</span> / %
</code></pre></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello &quot;</span></span> <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment">// &quot;Hello Kotlin&quot;</span>
</code></pre></div><ul><li>Assignment Operators</li></ul><div class="language-markdown ext-md"><pre class="language-markdown"><code>+= -= *= /= %=
</code></pre></div><ul><li>Comparison Operators</li></ul><div class="language-text ext-text"><pre class="language-text"><code>&gt; &lt; &gt;= &lt;= == !=
</code></pre></div><ul><li>Logocal Operators</li></ul><div class="language-text ext-text"><pre class="language-text"><code>&amp;&amp; || !
</code></pre></div><ul><li>Increment &amp; Decrement Operators</li></ul><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code>i<span class="token operator">++</span>
i<span class="token operator">--</span>
<span class="token operator">++</span>i
<span class="token operator">--</span>i
</code></pre></div><h3 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token comment">// this is a single comment</span>

<span class="token comment">/*
this is a multi-line comment
*/</span>
</code></pre></div><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h3><ul><li>API</li></ul><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// String</span>
<span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// Int</span>
<span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Double</span>
</code></pre></div><ul><li>not null assertion operator</li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>!! \u8868\u793A\u975E\u7A7A</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">parintln</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;You entered &quot;</span></span> <span class="token operator">+</span> age<span class="token punctuation">)</span>
</code></pre></div><h2 id="control" tabindex="-1"><a class="header-anchor" href="#control" aria-hidden="true">#</a> Control</h2><h3 id="if-statement" tabindex="-1"><a class="header-anchor" href="#if-statement" aria-hidden="true">#</a> if Statement</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u4E09\u5143\u8FD0\u7B97\u5199\u6CD5\u4E0Epython\u76F8\u540C \u591A\u4E00\u4E2Awhen\uFF0C\u4E0Eswitch\u6709\u7C7B\u4F3C\u4E4B\u5904</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>\u4E09\u5143\u8FD0\u7B97</li></ul><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span> <span class="token keyword">else</span> <span class="token operator">..</span><span class="token punctuation">.</span>
</code></pre></div><p>Example</p><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">else</span> x <span class="token operator">-</span><span class="token number">2</span>
</code></pre></div><ul><li>when</li></ul><div class="language-text ext-text"><pre class="language-text"><code>var res = when {
    condition1 -&gt; ...
    condition2 -&gt; ...
    else -&gt; ...
}
</code></pre></div><p>Example</p><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">19</span>
<span class="token keyword">val</span> group <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">{</span>
    age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Adult&quot;</span></span>
    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Child&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="for-loops" tabindex="-1"><a class="header-anchor" href="#for-loops" aria-hidden="true">#</a> For loops</h3><p><strong>for(x in nums) {...}</strong></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>for (x in nums) {...}</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>num <span class="token keyword">in</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>arr.forEach</strong></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>arr.forEach kotlin porvides an <code>it</code> keyword for name elements in forEach.</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    arr<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        <span class="token comment">// v -&gt; println(v * 4)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>2..5 =&gt; [2, 3, 4] &#39;a&#39;..&#39;e&#39; =&gt; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>num <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="while-loops" tabindex="-1"><a class="header-anchor" href="#while-loops" aria-hidden="true">#</a> while Loops</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
    i<span class="token operator">++</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="break-continue" tabindex="-1"><a class="header-anchor" href="#break-continue" aria-hidden="true">#</a> break &amp; continue</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">break</span>
<span class="token keyword">continue</span>
</code></pre></div><h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h2><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Tom&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Bob&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Amy&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">..</span><span class="token number">6</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>2..5 =&gt; [2, 3, 4, 5] &#39;a&#39;..&#39;e&#39; =&gt; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>

<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span>
<span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment">// &#39;t&#39;</span>
</code></pre></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>it <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token comment">// [8, 10]</span>
</code></pre></div><h2 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h2><h3 id="define-function" tabindex="-1"><a class="header-anchor" href="#define-function" aria-hidden="true">#</a> Define Function</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">isEven</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="function-arguments" tabindex="-1"><a class="header-anchor" href="#function-arguments" aria-hidden="true">#</a> Function Arguments</h3><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">welcome</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello, &quot;</span></span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Amy&quot;</span></span><span class="token punctuation">)</span>    <span class="token comment">// &quot;hello, Amy&quot;</span>
    <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>         <span class="token comment">// 7</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="return" tabindex="-1"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 7</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="anonymous-function-\u533F\u540D\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#anonymous-function-\u533F\u540D\u51FD\u6570" aria-hidden="true">#</a> Anonymous Function \u533F\u540D\u51FD\u6570</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>kotlin automatically understands the return type from the Arguments</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token comment">// val f: (Int, Int) -&gt; Int = (a, b -&gt; a + b)</span>
<span class="token keyword">val</span> f <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>

<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token punctuation">{</span>String<span class="token punctuation">,</span> String<span class="token punctuation">}</span> <span class="token operator">-&gt;</span> Boolean
</code></pre></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
        <span class="token comment">// v -&gt; println( v * 4)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="higher-order-function-\u81EA\u5B9A\u4E49\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#higher-order-function-\u81EA\u5B9A\u4E49\u65B9\u6CD5" aria-hidden="true">#</a> Higher-order Function \u81EA\u5B9A\u4E49\u65B9\u6CD5</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">apply</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> action<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">action</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x <span class="token operator">-&gt;</span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>OOP: Object-Oriented Programming</p></div><h3 id="defined-class" tabindex="-1"><a class="header-anchor" href="#defined-class" aria-hidden="true">#</a> Defined Class</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> User <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="create-object-of-the-class" tabindex="-1"><a class="header-anchor" href="#create-object-of-the-class" aria-hidden="true">#</a> Create object of the class</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> u1 <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
u1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;James&quot;</span></span>
ui<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span>
</code></pre></div><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h3><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> u1 <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;James&quot;</span></span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// &quot;James&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>multple constructors</strong></p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">class</span> User <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> name
    <span class="token punctuation">}</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> name
        age <span class="token operator">=</span> age
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getter-setter" tabindex="-1"><a class="header-anchor" href="#getter-setter" aria-hidden="true">#</a> Getter &amp; Setter</h3><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">class</span> User <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> filed
    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            filed <span class="token operator">=</span> <span class="token number">18</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            filed <span class="token operator">=</span> value
        <span class="token punctuation">}</span>

        <span class="token comment">// filed = if (value &lt; 0) 18 else value</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inheritance" tabindex="-1"><a class="header-anchor" href="#inheritance" aria-hidden="true">#</a> Inheritance</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>open</code> \u5B9A\u4E49\u7236\u7C7B</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">User</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Admin</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> country<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Amy&quot;</span></span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;USA&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>country<span class="token punctuation">)</span>    <span class="token comment">// &quot;USA&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Cat<span class="token operator">:</span> Animal<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><h3 id="visiblity-modifiers" tabindex="-1"><a class="header-anchor" href="#visiblity-modifiers" aria-hidden="true">#</a> Visiblity Modifiers</h3><ul><li>public</li><li>protected</li><li>private</li></ul><p><strong>privete</strong></p><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">private</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> u1 <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Amy&quot;</span></span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>age<span class="token punctuation">)</span>     <span class="token comment">// error</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>protected</strong></p><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">var</span> balance <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Saving</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// some code</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="abstract-classes" tabindex="-1"><a class="header-anchor" href="#abstract-classes" aria-hidden="true">#</a> Abstract Classes</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Abstract classes are always <code>open</code>, so don&#39;t need to yse the <code>open</code> keyword</p></div><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Admin</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Moderator</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> country<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u62BD\u8C61\u7C7B\u53EF\u4EE5\u5305\u542B\u62BD\u8C61\u65B9\u6CD5--\u65B9\u6CD5\u6CA1\u6709\u5B9A\u4E49\u5177\u4F53\u5B9E\u73B0\uFF0C\u9700\u8981implement <code>abstract</code><code>override</code></p></div><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Admin</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot; is &quot;</span></span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot; years old&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Moderator</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> country<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span>
        <span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot; is from &quot;</span></span> <span class="token operator">+</span> country<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code-projects" tabindex="-1"><a class="header-anchor" href="#code-projects" aria-hidden="true">#</a> Code Projects</h2><p><strong>1. Water Consumption</strong></p><div class="language-kotlin ext-kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> years <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> res <span class="token operator">=</span> years <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">*</span> <span class="token number">15</span>
    <span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>2. Parking Fee</strong></p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> hours <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> total<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0.0</span>

    total <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">{</span>
        hours <span class="token operator">&gt;=</span> <span class="token number">24</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>hours <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">15.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span>hours <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span>
        hours <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">-&gt;</span> hours <span class="token operator">*</span> <span class="token number">1.0</span>
        <span class="token keyword">else</span> <span class="token number">5.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hours <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
    if (hours &gt;= 24) {
        total = ((hours / 24) * 15.0) + ((hours % 24) * 0.5)
    } else if (hours &lt;= 5) {
        total = hours * 1.0
    } else {
        total = 5.0 + ((hours - 5) * 0.5)
    }
    */</span>
    <span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. Shipping Calculator</strong></p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">shippingCost</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> Double<span class="token punctuation">,</span> international<span class="token operator">:</span> Boolean<span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>international<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token number">0.15</span> <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> amount <span class="token operator">*</span> <span class="token number">0.15</span> <span class="token keyword">else</span> <span class="token number">50.0</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token number">75</span><span class="token punctuation">)</span> <span class="token number">0.0</span> <span class="token keyword">else</span> amount <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> total <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> international <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">shippingCost</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> international<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. Music Player</strong></p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">class</span> MusicPlayer <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> songs<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//your code goes here</span>
    <span class="token keyword">fun</span> <span class="token function">add</span><span class="token punctuation">(</span>song<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        songs <span class="token operator">+=</span> song
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        songs<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Playing &quot;</span></span> <span class="token operator">+</span> songs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> m <span class="token operator">=</span> <span class="token function">MusicPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> input <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;stop&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    m<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    m<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,117);function p(o,e){return t}var l=n(a,[["render",p],["__file","kotlin.html.vue"]]);export{l as default};
