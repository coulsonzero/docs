import{_ as l,r as c,o as i,c as u,a,w as t,F as k,e as o,b as n,d as s}from"./app.afb47d0b.js";const r={},d=o(`<h1 id="swift" tabindex="-1"><a class="header-anchor" href="#swift" aria-hidden="true">#</a> Swift</h1><blockquote><p>IOS App</p></blockquote><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span>
</code></pre></div><h3 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token comment">// This is a single comment</span>

<span class="token comment">/*
This is a multi-line comment
*/</span>
</code></pre></div><h3 id="variables-constants" tabindex="-1"><a class="header-anchor" href="#variables-constants" aria-hidden="true">#</a> Variables &amp; Constants</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token comment">// \u53D8\u91CF</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">42</span>
<span class="token comment">// \u5E38\u91CF</span>
<span class="token keyword">let</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span>
</code></pre></div><h3 id="datatypes" tabindex="-1"><a class="header-anchor" href="#datatypes" aria-hidden="true">#</a> DataTypes</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">/* basic types */</span>

<span class="token comment">// \u6570\u5B57</span>
<span class="token keyword">var</span> num<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">var</span> <span class="token constant">PI</span><span class="token punctuation">:</span> <span class="token class-name">Float</span> <span class="token operator">=</span> <span class="token number">3.14</span>
<span class="token keyword">var</span> PI2<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">3.14159</span>
<span class="token comment">// \u5E03\u5C14</span>
<span class="token keyword">var</span> flag<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token comment">// \u5B57\u7B26\u4E32</span>
<span class="token keyword">var</span> msg<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span>
<span class="token comment">// \u5B57\u7B26</span>
<span class="token keyword">var</span> char<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;A&quot;</span></span>

<span class="token comment">// \u5F15\u7528\u7C7B\u578B</span>
<span class="token comment">// Array</span>
<span class="token keyword">var</span> nums<span class="token punctuation">:</span> <span class="token class-name">Array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">// Set</span>
<span class="token keyword">var</span> <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u5B9A\u4E49\u540C\u4E00\u7C7B\u578B\u65F6\uFF0C\u53EF\u653E\u5728\u540C\u4E00\u884C</p></blockquote><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token class-name">Int</span>
a <span class="token operator">=</span> <span class="token number">3</span>
b <span class="token operator">=</span> <span class="token number">4</span>
</code></pre></div><h3 id="opeartor" tabindex="-1"><a class="header-anchor" href="#opeartor" aria-hidden="true">#</a> Opeartor</h3><div class="language-Swift ext-Swift line-numbers-mode"><pre class="language-Swift"><code>// + - * / %

// Comparison Operators:
// == != &gt; &lt; &gt;= &lt;=

// Logical Operators:
// ! &amp;&amp; ||

// a ? b : c
// a...b     a..&lt;b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token comment">// +</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, &quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;Swift&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment">// a ? b : c</span>
<span class="token keyword">var</span> gender <span class="token operator">=</span> <span class="token number">1</span>
gender <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;male&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;female&quot;</span></span><span class="token punctuation">)</span>

</code></pre></div><p><strong>1.\u7A7A\u6307\u9488</strong></p><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token comment">// String?</span>
<span class="token keyword">var</span> myCode<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>
<span class="token function">print</span><span class="token punctuation">(</span>myCode<span class="token punctuation">)</span>   <span class="token comment">// nil</span>

<span class="token keyword">var</span> myCode2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hi&quot;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span>myCode2<span class="token punctuation">)</span>   <span class="token comment">// &quot;hi&quot;</span>
</code></pre></div><p><strong>2.Range</strong></p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 1...5   -&gt; 1,2,3,4,5</span>
<span class="token comment">// 1..&lt;5   -&gt; 1,2,3,4</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
1
2
3
4
5
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token comment">// \u683C\u5F0F\u5316\u8F93\u51FA\u53D8\u91CF</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;num: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">num</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// \u591A\u4E2A\u53D8\u91CF\u4E0D\u6362\u884C\uFF0C\u7A7A\u683C\u5206\u5272</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>     <span class="token comment">// 3 4</span>
</code></pre></div><h3 id="type-annotations" tabindex="-1"><a class="header-anchor" href="#type-annotations" aria-hidden="true">#</a> Type Annotations</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token class-name">Int</span>
<span class="token class-name">Double</span> <span class="token operator">&amp;</span> <span class="token class-name">Float</span>
<span class="token class-name">Bool</span>
<span class="token class-name">String</span>
</code></pre></div><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">42</span>        <span class="token comment">// Integer</span>
<span class="token keyword">let</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span>    <span class="token comment">// Double</span>
<span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span>  <span class="token comment">// String</span>
</code></pre></div><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token class-name">String</span>
message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span>

<span class="token keyword">var</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token class-name">Double</span>
</code></pre></div><h2 id="control" tabindex="-1"><a class="header-anchor" href="#control" aria-hidden="true">#</a> Control</h2><h3 id="if-statement" tabindex="-1"><a class="header-anchor" href="#if-statement" aria-hidden="true">#</a> If Statement</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">if</span> age <span class="token operator">==</span> <span class="token number">18</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> age <span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="switch-statement" tabindex="-1"><a class="header-anchor" href="#switch-statement" aria-hidden="true">#</a> Switch Statement</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// \u4E0D\u9700\u8981 break, fallthrough \u7EE7\u7EED\u4E0B\u4E00\u4E2A</span>

<span class="token keyword">switch</span> day <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
<span class="token comment">// statement(s)</span>
<span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span>
<span class="token comment">// statement(s)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
<span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">switch</span> curPoint <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">where</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">:</span>
<span class="token comment">// statement(s)</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">where</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>
<span class="token comment">// statement(s)</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,32),m=n("div",{class:"language-swift ext-swift line-numbers-mode"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"var"),s(" distance"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"12"),s(`
`),n("span",{class:"token keyword"},"switch"),s(" distance "),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"not a valid distance"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},"..."),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"near"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"10"),n("span",{class:"token operator"},"..."),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"far"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"default"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"too far"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-swift ext-swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" myPoint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"switch"),s(" myPoint "),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"where"),s(" x "),n("span",{class:"token operator"},"=="),s(" y"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"'),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},"myPoint"),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"},': x == y"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"where"),s(" x "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"-"),s("y"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"'),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},"myPoint"),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"},': x == -y"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"'),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},"myPoint"),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),b=n("div",{class:"language-swift ext-swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" curPoint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"switch"),s(" curPoint "),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"where"),s(" x "),n("span",{class:"token operator"},">"),s(" y"),n("span",{class:"token punctuation"},":"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"A"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"where"),s(" x "),n("span",{class:"token operator"},"=="),s(" y"),n("span",{class:"token punctuation"},":"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"B"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"C"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),g=o(`<h3 id="while-loop" tabindex="-1"><a class="header-anchor" href="#while-loop" aria-hidden="true">#</a> While Loop</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">while</span> condition <span class="token punctuation">{</span>
    <span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">repeat</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> condition
</code></pre></div><h3 id="for-loop" tabindex="-1"><a class="header-anchor" href="#for-loop" aria-hidden="true">#</a> For Loop</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span>
    <span class="token comment">// statement(s)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="fallthrough-continue-break" tabindex="-1"><a class="header-anchor" href="#fallthrough-continue-break" aria-hidden="true">#</a> fallthrough &amp; continue &amp; break</h3><blockquote><p>fallthrough \u7528\u4E8Eswitch statement\u9648\u8FF0\u8BED\u53E5\u4E2D\u4EE5\u4E0D\u8DF3\u51FA</p></blockquote><h2 id="collections" tabindex="-1"><a class="header-anchor" href="#collections" aria-hidden="true">#</a> *Collections</h2><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token comment">// \u5B57\u7B26\u8BA1\u6570</span>
<span class="token punctuation">.</span>count
<span class="token comment">// \u5B57\u7B26\u4E32\u683C\u5F0F\u5316</span>
<span class="token punctuation">\\</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token comment">// \u5224\u65AD\u7A7A\u4E32</span>
<span class="token punctuation">.</span>isEmpty
</code></pre></div><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 1. \u7A7A\u4E32(\u5B57\u7B26\u4E32\u521D\u59CB\u5316)</span>
<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span>        <span class="token comment">// var str: String = &quot;&quot;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// var str: String = String()</span>
<span class="token comment">// \u5224\u65AD \`\u7A7A\u4E32\`</span>
<span class="token function">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span>  <span class="token comment">// true</span>


<span class="token comment">// 2. \u62FC\u63A5</span>
<span class="token comment">// +</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello &quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;World&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// +=</span>
<span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hi&quot;</span></span>
msg <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; World&quot;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">// &quot;Hi World&quot;</span>


<span class="token comment">// 3. \u683C\u5F0F\u5316</span>
<span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">let</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;num: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">n</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times 2 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Double</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token comment">// num: 3 times 2 is 6.0</span>

<span class="token comment">// 4. \u5B57\u7B26\u8BA1\u6570</span>
<span class="token keyword">let</span> str<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, Swift&quot;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>count<span class="token punctuation">)</span>   <span class="token comment">// 12</span>

<span class="token comment">// 5. \u5224\u65AD\u76F8\u7B49</span>
<span class="token function">print</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span>


<span class="token comment">// 6. \u524D\u540E\u7F00 startswith/endswith</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;main.swift&quot;</span></span><span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;main&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// true</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;main.swift&quot;</span></span><span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>


<span class="token comment">// 7. \u5B57\u7B26\u4E32\u904D\u5386</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string-literal"><span class="token string">&quot;Hi, Swift&quot;</span></span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h3><blockquote><p>\u5B58\u50A8\u76F8\u540C\u7C7B\u578B\u5143\u7D20\u7684\u96C6\u5408</p></blockquote><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token punctuation">.</span>count
<span class="token punctuation">.</span>isEmpty
<span class="token comment">// \u589E</span>
<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e<span class="token operator">|</span>arr<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">+=</span>
<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token comment">// \u5220</span>
<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// \u67E5(\u6539)</span>
arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
arr<span class="token punctuation">[</span>l<span class="token operator">...</span>r<span class="token punctuation">]</span>

<span class="token comment">// \u539F\u5730\u6392\u5E8F</span>
<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token operator">&gt;</span><span class="token punctuation">)</span>    <span class="token comment">// \u964D\u5E8F</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;hi&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr<span class="token punctuation">:</span> <span class="token class-name">Array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;hi&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span><span class="token punctuation">]</span>


<span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>          <span class="token comment">// [&quot;hi&quot;, &quot;swift&quot;, &quot;world&quot;]</span>
<span class="token comment">// \u6570\u7EC4\u5927\u5C0F</span>
<span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>count<span class="token punctuation">)</span>    <span class="token comment">// 3</span>
<span class="token comment">// \u7A7A\u6570\u7EC4</span>
<span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span>  <span class="token comment">// false</span>
<span class="token comment">// \u65B0\u589E\u5143\u7D20(\u672B\u5C3E)</span>
arr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment">// [&quot;hi&quot;, &quot;swift&quot;, &quot;world&quot;, &quot;hello&quot;]</span>
<span class="token comment">// arr.append(contentsOf: [&quot;h1&quot;, &quot;h2&quot;, &quot;h3&quot;])</span>
arr <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;golang&quot;</span></span><span class="token punctuation">]</span>    <span class="token comment">// [&quot;hi&quot;, &quot;swift&quot;, &quot;world&quot;, &quot;hello&quot;, &quot;golang&quot;]</span>
<span class="token comment">// \u67E5\u8BE2\u5143\u7D20</span>
<span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">// &quot;hi&quot;</span>
<span class="token comment">// \u4FEE\u6539\u5143\u7D20</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;good&quot;</span></span>      <span class="token comment">// [&quot;good&quot;, &quot;swift&quot;, &quot;world&quot;, &quot;hello&quot;, &quot;golang&quot;]</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;banana&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;orange&quot;</span></span><span class="token punctuation">]</span>   <span class="token comment">// [&quot;good&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;golang&quot;]</span>
<span class="token comment">// \u63D2\u5165\u5143\u7D20</span>
arr<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ie&quot;</span></span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment">// \u5220\u9664\u5143\u7D20</span>
arr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// [&quot;good&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;golang&quot;]</span>
arr<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// [&quot;good&quot;, &quot;banana&quot;, &quot;orange&quot;]</span>
arr<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// [&quot;banana&quot;, &quot;orange&quot;]</span>
arr<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// []</span>


<span class="token comment">// \u6570\u7EC4\u904D\u5386</span>
<span class="token keyword">var</span> arr<span class="token punctuation">:</span> <span class="token class-name">Array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;hi&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span><span class="token punctuation">]</span>

<span class="token keyword">for</span> v <span class="token keyword">in</span> arr <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> v <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">..&lt;</span>arr<span class="token punctuation">.</span>count<span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> arr<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">v</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><blockquote><p>\u5B58\u50A8\u76F8\u540C\u7C7B\u578B\u5143\u7D20\u4E0D\u540C\u503C\u7684\u96C6\u5408</p></blockquote><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>set\u6309<code>\u968F\u673A</code>\u987A\u5E8F\u8F93\u51FA</p></div><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// \u957F\u5EA6\u5927\u5C0F</span>
<span class="token punctuation">.</span>count
<span class="token comment">// \u6392\u5E8F</span>
<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// \u589E</span>
<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token comment">// \u5220</span>
<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// \u5305\u542B</span>
<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 1. init</span>
<span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Character</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// []</span>
<span class="token keyword">var</span> <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;David&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Susan&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Robert&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">var</span> <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;David&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Susan&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Robert&quot;</span></span><span class="token punctuation">]</span>   <span class="token comment">// \u7B80\u5199</span>

<span class="token comment">// 2. api</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>      <span class="token comment">// 3</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">)</span>    <span class="token comment">// [&quot;Robert&quot;, &quot;David&quot;, &quot;Paul&quot;, &quot;Susan&quot;]</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">// 3. \u904D\u5386</span>
<span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 4. \u96C6\u5408\u8FD0\u7B97</span>
<span class="token keyword">let</span> set_a<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;B&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">let</span> set_b<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;B&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;D&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">]</span>
<span class="token comment">// \u4EA4\u96C6 A \u2229 B</span>
<span class="token function">print</span><span class="token punctuation">(</span>set_a<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// [&quot;A&quot;, &quot;B&quot;]</span>
<span class="token comment">// \u5E76\u96C6 A \u222A B</span>
<span class="token function">print</span><span class="token punctuation">(</span>set_a<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;]</span>
<span class="token comment">// A \u2295 B (\u4E0D\u5C5E\u4E8E\u4ED6\u4EEC\u7684\u4EA4\u96C6\u7684\u96C6\u5408)</span>
<span class="token function">print</span><span class="token punctuation">(</span>set_a<span class="token punctuation">.</span><span class="token function">symmetricDifference</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;C&quot;, &quot;D&quot;, &quot;E&quot;]</span>
<span class="token comment">// A - B (\u5728 A \u800C\u4E0D\u5728 B)</span>
<span class="token function">print</span><span class="token punctuation">(</span>set_a<span class="token punctuation">.</span><span class="token function">subtracting</span><span class="token punctuation">(</span>set_b<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">// [&quot;C&quot;]</span>

<span class="token comment">// 5. \u5B50\u96C6\u3001\u8D85\u96C6</span>

<span class="token comment">// \u5224\u65AD\u96C6\u5408\u76F8\u7B49</span>
set_a <span class="token operator">==</span> set_b
<span class="token comment">// \u5B50\u96C6</span>
<span class="token punctuation">.</span><span class="token function">isSubset</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span>
<span class="token comment">// \u8D85\u96C6</span>
<span class="token punctuation">.</span><span class="token function">isSuperset</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span>
<span class="token comment">// \u4E0D\u76F8\u4EA4</span>
<span class="token punctuation">.</span><span class="token function">isDisjoint</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dict" tabindex="-1"><a class="header-anchor" href="#dict" aria-hidden="true">#</a> Dict</h3><blockquote><p>\u5B58\u50A8\u952E\u503C\u5BF9\u7684\u96C6\u5408</p></blockquote><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 1. init</span>
<span class="token keyword">var</span> dict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// [:]</span>
<span class="token keyword">var</span> dict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;B&quot;</span></span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">var</span> dict<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;B&quot;</span></span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">]</span>


<span class="token comment">// 2. api</span>
<span class="token keyword">var</span> airports<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;TOR&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Toronto&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;NY&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;New York&quot;</span></span><span class="token punctuation">]</span>
<span class="token comment">// \u65B0\u589E(\u968F\u673A\u987A\u5E8F)</span>
airports<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;LHR&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;London&quot;</span></span>          <span class="token comment">// [&quot;LHR&quot;: &quot;London&quot;, &quot;TOR&quot;: &quot;Toronto&quot;, &quot;NY&quot;: &quot;New York&quot;]</span>
<span class="token comment">// \u4FEE\u6539</span>
airports<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;LHR&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;London Heathrow&quot;</span></span> <span class="token comment">// [&quot;LHR&quot;: &quot;London Heathrow&quot;, &quot;TOR&quot;: &quot;London&quot;, &quot;NY&quot;: &quot;New York&quot;]</span>
airports<span class="token punctuation">.</span><span class="token function">updateValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;London Update&quot;</span></span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;LHR&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// \u67E5\u8BE2 (\u4E0D\u5B58\u5728\u65F6\u4E3Anil)</span>
<span class="token function">print</span><span class="token punctuation">(</span>airports<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;LHR&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// \u5220</span>
airports<span class="token punctuation">.</span><span class="token function">removeValue</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;LHR&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment">// \u904D\u5386</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> airports <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;key: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">key</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, value: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">value</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> key <span class="token keyword">in</span> airports<span class="token punctuation">.</span>keys <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token keyword">for</span> value <span class="token keyword">in</span> airports<span class="token punctuation">.</span>values <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6392\u5E8F\u8F93\u51FAkey\u6216value</span>
<span class="token keyword">for</span> key <span class="token keyword">in</span> airports<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> value <span class="token keyword">in</span> airports<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple" aria-hidden="true">#</a> Tuple</h3><div class="language-swift ext-swift"><pre class="language-swift"><code><span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Not Found&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment">// 404</span>
<span class="token keyword">let</span> httpStatus <span class="token operator">=</span> <span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>httpStatus<span class="token punctuation">.</span>code<span class="token punctuation">)</span>  <span class="token comment">// 200</span>
</code></pre></div><h3 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> Enum</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">Compass</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">North</span>
    <span class="token keyword">case</span> <span class="token class-name">South</span>
    <span class="token keyword">case</span> <span class="token class-name">East</span>
    <span class="token keyword">case</span> <span class="token class-name">West</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">Compass</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">North</span><span class="token punctuation">,</span> <span class="token class-name">South</span><span class="token punctuation">,</span> <span class="token class-name">East</span><span class="token punctuation">,</span> <span class="token class-name">West</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Compass</span><span class="token punctuation">.</span><span class="token class-name">West</span><span class="token punctuation">)</span> <span class="token comment">// West</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="oop" tabindex="-1"><a class="header-anchor" href="#oop" aria-hidden="true">#</a> OOP</h2><h3 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h3><ul><li>parameters</li><li>return type</li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Coulson&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// \u6BD4\u8F83\u4E24\u6570\u6700\u5927\u503C</span>
<span class="token keyword">func</span> <span class="token function-definition function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 5</span>

<span class="token comment">// \u6C42\u6570\u7EC4\u6700\u503C</span>
<span class="token keyword">func</span> <span class="token function-definition function">minMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>min<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> curMin<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> curMax<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> v <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..&lt;</span>arr<span class="token punctuation">.</span>count<span class="token punctuation">]</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> v <span class="token operator">&lt;</span> curMin <span class="token punctuation">{</span>
            curMin <span class="token operator">=</span> v
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> v <span class="token operator">&gt;</span> curMax <span class="token punctuation">{</span>
            curMax <span class="token operator">=</span> v
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>curMin<span class="token punctuation">,</span> curMax<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">minMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// (min: -2, max: 6)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u53C2\u6570</strong></p>`,32),f=n("div",{class:"language-swift ext-swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},"// \u989D\u5916\u663E\u5F0F\u53C2\u6570"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"min"),n("span",{class:"token punctuation"},"("),s("num1 a"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},","),s(" num2 b"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"<"),s(" b "),n("span",{class:"token operator"},"?"),s(" a "),n("span",{class:"token punctuation"},":"),s(` b
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),s("num1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(" num2"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])])],-1),w=n("div",{class:"language-swift ext-swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},"// \u9ED8\u8BA4\u53C2\u6570"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"hi"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"Coulson"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"hi, '),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},"name"),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"},'"')]),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"hi"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s("                "),n("span",{class:"token comment"},'// "hi, Coulson"'),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"hi"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"John"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s("    "),n("span",{class:"token comment"},'// "hi, John"'),s(`
`)])])],-1),q=n("div",{class:"language-swift ext-swift line-numbers-mode"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},"// \u4E0D\u5B9A\u53C2"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"sum"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Double"),n("span",{class:"token operator"},"..."),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"Double"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"var"),s(" total"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Double"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" n "),n("span",{class:"token keyword"},"in"),s(" nums "),n("span",{class:"token punctuation"},"{"),s(`
        total `),n("span",{class:"token operator"},"+="),s(` n
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` total
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"sum"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"3.3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1.2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5.1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s("     "),n("span",{class:"token comment"},"// 9.6"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-swift ext-swift line-numbers-mode"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},"// \u51FD\u6570\u6307\u9488 (\u539F\u5730\u4FEE\u6539)"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"swap"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"inout"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"inout"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" temp "),n("span",{class:"token operator"},"="),s(` a
    a `),n("span",{class:"token operator"},"="),s(` b
    b `),n("span",{class:"token operator"},"="),s(` temp
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"var"),s(" a"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),s(`
`),n("span",{class:"token keyword"},"var"),s(" b"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),s(`
`),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),s("a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),s("b"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")"),s("     "),n("span",{class:"token comment"},"// 5, 3"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("p",null,[n("strong",null,"\u8FD4\u56DE\u503C")],-1),x=n("div",{class:"language-swift ext-swift line-numbers-mode"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},"// \u95ED\u5305\uFF1A\u51FD\u6570\u4F5C\u4E3A\u51FD\u6570\u7684\u8FD4\u56DE\u503C, \u53EF\u4EE5\u5C06\u5176\u4ED6\u51FD\u6570\u5199\u5728\u51FD\u6570\u5185"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"plus"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" num "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"minus"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" num "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// \u95ED\u5305"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"chooseFunc"),n("span",{class:"token punctuation"},"("),s("flag"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Bool"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" flag "),n("span",{class:"token operator"},"?"),s(" plus "),n("span",{class:"token punctuation"},":"),s(` minus
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"var"),s(" f "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"chooseFunc"),n("span",{class:"token punctuation"},"("),s("flag"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"f"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"12"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s("    "),n("span",{class:"token comment"},"// 11"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"chooseFunc"),n("span",{class:"token punctuation"},"("),s("flag"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"12"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s("   "),n("span",{class:"token comment"},"// 13"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-swift ext-swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},"// \u9012\u5F52"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"fact"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" n "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},":"),s(" n "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token function"},"fact"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},":"),s(" n"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"fib"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" n "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"?"),s(" n "),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token function"},"fib"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},":"),s(" n"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token function"},"fib"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},":"),s(" n"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),S=o(`<h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6210\u5458\u53D8\u91CF</span>
    <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hi&quot;</span></span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> step<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;NewStep: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">newValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;OldStep: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">oldValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6210\u5458\u65B9\u6CD5</span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> f<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">12</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">lazy</span> <span class="token keyword">var</span> ma <span class="token operator">=</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">func</span> <span class="token function-definition function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">func</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> a
    <span class="token punctuation">}</span>
    <span class="token keyword">func</span> <span class="token function-definition function">isRight</span><span class="token punctuation">(</span>x <span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">&gt;</span> x
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello class&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token function-definition function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Demo</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Demo</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span>
<span class="token class-name">Demo</span><span class="token punctuation">.</span>step <span class="token operator">=</span> <span class="token number">20</span>
<span class="token class-name">Demo</span><span class="token punctuation">.</span>step <span class="token operator">=</span> <span class="token number">30</span>

<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>ma<span class="token punctuation">)</span>

d<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>count<span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">isRight</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">3.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="struct" tabindex="-1"><a class="header-anchor" href="#struct" aria-hidden="true">#</a> Struct</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code>
<span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span>
    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">moveByX</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">+=</span> dx
        y <span class="token operator">+=</span> dy
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">moveByX</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token number">2.2</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token number">1.2</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>

<span class="token keyword">struct</span> <span class="token class-name">Times</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mult<span class="token punctuation">:</span> <span class="token class-name">Int</span>
    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mult <span class="token operator">*</span> index
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Times</span><span class="token punctuation">(</span>mult<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 15</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function I(C,D){const p=c("CodeGroupItem"),e=c("CodeGroup");return i(),u(k,null,[d,a(e,null,{default:t(()=>[a(p,{title:"switch-1"},{default:t(()=>[m]),_:1}),a(p,{title:"switch-2-1"},{default:t(()=>[v]),_:1}),a(p,{title:"switch-2-2"},{default:t(()=>[b]),_:1})]),_:1}),g,a(e,null,{default:t(()=>[a(p,{title:"\u989D\u5916\u53C2\u6570"},{default:t(()=>[f]),_:1}),a(p,{title:"\u53C2\u6570\u9ED8\u8BA4\u503C"},{default:t(()=>[w]),_:1}),a(p,{title:"\u4E0D\u5B9A\u53C2"},{default:t(()=>[q]),_:1}),a(p,{title:"\u6307\u9488\u53C2\u6570"},{default:t(()=>[h]),_:1})]),_:1}),y,a(e,null,{default:t(()=>[a(p,{title:"\u95ED\u5305"},{default:t(()=>[x]),_:1}),a(p,{title:"\u9012\u5F52"},{default:t(()=>[_]),_:1})]),_:1}),S],64)}var H=l(r,[["render",I],["__file","swift.html.vue"]]);export{H as default};
